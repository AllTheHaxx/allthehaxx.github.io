<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>AllTheHaxx Lua API | _Project Description Short_</title>
		<link rel="Stylesheet" href="styles/themes/default.css" />
		<link rel="Stylesheet" href="js/highlight/styles/vs.css" />
		<script src="js/highlight/highlight.pack.js" type="text/javascript"></script>
		<script>hljs.initHighlightingOnLoad();</script>
		<style type="text/css">
			/* page specific styles */
		</style>
</head>
<body>

<div id="wrapper">

	<div id="top">
		<h1 id="title">AllTheHaxx Lua API</h1>
		<h2 id="description">
			A small guide to the <strong>AllTheHaxx Lua API</strong>. This Guide is not a complete guide on how
			to code in Lua, there are a lot of tutorials online, so probably learn something about Lua first
			if you don't know what its all about already. TODO: Edit the style sheet and make this look better (e.G. bigger font sizes plx)
		</h2>
		<a href="#toc" id="toc-link">Table of Contents</a>
	</div>

	<div id="toc" class="section clearthis">
		<h1>Table of Contents</h1>

		<div class="col one clear">
			<h2>Documentation</h2>
			<ul>
				<li><a href="#faq">FAQ <span class="arrow">&raquo;</span></a></li>
				<li><a href="#basic">Basic Lua Programming <span class="arrow">&raquo;</span></a></li>
				<li><a href="#setup">Setting Up A Script <span class="arrow">&raquo;</span></a></li>
				<li><a href="#apiitems">API Items <span class="arrow">&raquo;</span></a></li>
			</ul>
		</div>
		<div class="col two">
			<h2>Examples</h2>
			<ul>
				<li><a href="https://github.com/AllTheHaxx/Lua-Scripts">See All Examples <span class="arrow">&raquo;</span></a></li>
			</ul>
		</div>
		<div class="col three">
			<h2>Project Notes</h2>
			<ul>
				<li><a href="#support">Support <span class="arrow">&raquo;</span></a></li>
				<li><a href="#license">License <span class="arrow">&raquo;</span></a></li>
			</ul>
		</div>
		<div class="col four">
			<h2>Maintainers</h2>
			<ul>
				<li><em>xush'</em> | <a href="https://github.com/xushWT/">GitHub</a></li>
				<li><em>Henritees</em> | <a href="https://github.com/Henningstone">GitHub</a></li>
				<li><em>FuroS</em> | <a href="https://github.com/Ozhead/">GitHub</a></li>
			</ul>
		</div>
	</div>

	<div id="faq" class="section">
		<h1>FAQ</h1>
		<p>Frequently asked questions about the <strong>AllTheHaxx Lua API</strong>.</p>
		<p></p>
		
		<h2>What is Lua?</h2>
		<p>Lua is a dynamic scriptlanguage which can be embedded in other discrete programs. It
			allows to run external Lua-Scripts in the program through an embedded
			Just-In-Time-Compiler (because we use LuaJIT, normal Lua only offers an interpreter).</p>

		<h2>What do I need?</h2>
		<p>Through downloading the AllTheHaxx client the first step is already done.
			We suggest to use a Lua-capable editor (notepad++, any IDE editor, <strong>not</strong> the standard windows editor).
			Also reading this tutorial is really helpful (if not vital; experienced
			programmer can read through it fast tho).</p>
	
		<h2>What can be done with Lua?</h2>
		<p>We implemented Lua in our script in a way that you can do as many stuff as possible.
			You can mess around in the LuaConsole (F6) or write your own functions, scripts etc...</p>

		<h2>How is the System set up?</h2>
		<p>You can write your own functions or scripts in .lua files and run them through our Lua-GUI
			in the settings or you can write local functions in the LuaConsole (they won't be saved on
			closing the client!).
			Each .lua file has their own "LuaSpace", that means it doesn't clash with other scripts in any
			way.
			In our system you can simply bind your written Lua-Functions to an Ingame-Event, such as
			OnTick, which is called every 50 times per second by the client.
			Please note : We, the devs, must implement all Ingame-Functions to the Lua-API, so it might
			occur that there is no specific function for your needs provided, in that case contact the devs
			through skype or our QuakeNet Channel. Anyway, we try to implement as much updates
			with new necessary Lua-Functions as possible.</p>

		<h2>Pros and cons for using Lua?</h2>
		<p><strong>Pro</strong></p>
		<ul class="list">
			<li>No compilation needed</li>
			<li>You don't need to know C++ or any Teeworlds related coding stuff</li>
			<li>Your written Lua-Stuff won't (usually) crash your client; error messages are printed in Teeworld's console</li>
		</ul>

		<p><strong>Contra</strong></p>
		<ul class="list">
			<li>You won't be able to rewrite the whole client to a new thing, you can only change the things that are offered to change and add minor new functionalities to it.</li>
			<li>You have to read through this documentation.</li>
			<li>You have to read through this documentation accurate if you can't programm at all, and we also recommend to checkout another Lua as this one is far from complete (there are great videos!).</li>
		</ul>	
	</div>

	<div id="basic" class="section">
		<h1>Basic Lua Programming</h1>
		<p>In this chapter we will explain the basic Lua-Syntax (no API-stuff yet!); if you are new to programming in general you should start reading from here; the rest should just look at the syntax and continue. This chapters intention is to refresh your Lua skills.</p>

		<h2>Comments</h2>
		<p>A comment in lua starts with two dashes <code>("--")</code>. Everything behind will be ignored during execution. If you want to outcomment a whole block of code, you can do so by putting <code>--[[</code> at the start of your comment, and <code>]]</code> at the end.</p>

		<h2>Variables</h2>
		<p>Variables are used to store (and read) data in any way. That's all, Lua is dynamically typed, this means there are no datatypes etc., so you don't need to mind anything. Variables must start with a letter and should indicite what they are storing by their name.
		</p><pre><code>x = 10 		-- the number 10 is now stored in the variable x :)
y = "Text" 	-- y stores now the string "Text"
x = y 		-- x has now the same value as y → x is now "Text"</code></pre><p>
			<br>In General you can store anything you want in variables in Lua, even functions.
			<br>Valid operators for variables (and general)
			<br><strong>Mathemathical: +, - , *, /, =</strong></p>

		<h2>Functions</h2>
		<p>Functions are a seperate part of a script, they only do their stuff if you call them. Otherwise they won't do anything.
			<br>Functions can get some input-variables (so called 'parameters') and can return one value or in internal in Lua multiple values (but this is usually not needed).

		<br><br>The structure of a function looks like this:</p>
		<pre><code class="lua">function Name(ParameterOne)
	-- do stuff here
	return something -- optional, also multireturn is possible!
end</code></pre>
		
		<p><br>Example:</p>
		<pre><code class="lua">function Sum(Number1, Number2)
	NumberSum = Number1 + Number2 -- sets the variable NumberSum
	return NumberSum -- returns the variable NumberSum
end</code></pre>

		<p><br>As stated, this won't do anything on its own: You need to call the function. This can be
achieved like in this short example programm:</p>
		<pre><code class="lua">function Sum(Number1, Number2)
	NumberSum = Number1 + Number2 -- sets the variable NumberSum
	return NumberSum -- returns the variable NumberSum
end

x = 5
y = 10
Result = Sum(x, y) -- the function is called, sums both numbers and returns 15; this number then is stored in the variable 'Result'
function HelloWorld() -- no parameters!
	print("Hello world! The sum of "..x.." and "..y.." is "..Result) -- the ".." operator glues two pieces of text (strings)
end

HelloWorld() -- call the function</code></pre>
		<p>This simply prints "Hello world! The sum of 5 and 10 is 15" into the Teeworlds-Console. Try it for yourself!</p>
	
		<h2>The if-statement</h2>
		<p>This statement is important when you want something to be done <strong>based on a condition</strong>.

		<br><br>Send a chatmessage when someone says something in the chat, quit the game if you died 5 times and any other things bound to conditions you can think of.
		<br>General syntax:</p>
		<pre><code class="lua">if Statement then -- "Statement" can for example be 5 ~= 3 (always true)
	-- do stuff...
end</pre></code>
		<p>Statements are usually comparisons of variables, numbers, texts, returnvalues from functions or anything else.
		<h2>Operators</h2></p>
		<ul class="list">
			<li><h2>==</h2>
			This operator in an statement returns true if the data left and right of the operator have the <strong>same value</strong>, thus are equal!
			<pre><code class="lua">x = 10 -- x is now assumed to be 10 in any further examples!
if x == 5 then
	print("x is 5!")
end</code></pre>
			This is a false statement, because x is declared as 10 and 10 is not 5, so the print function will not be called.
			<br>In contrast:
			<pre><code class="lua">if x == 10 then
	print("Yey, x is 10!")
end</code></pre>
			This is a true statement because x is declared as 10 and 10 is equal to 10, so you will find a nice message in your console by the print function.</li>
			<li><h2>~=</h2>
			This operator is the opposite of ==, it will return true if the equation is <strong>not equal</strong></li>
			<li><strong>TODO: Add the rest. While you see this message as a user... Just use google for now.</strong></li>
		</ul>

		<h2>Loops</h2>
		<p><strong>TODO: Add the rest. While you see this message as a user... Just use google for now.</strong></p>

	</div>

	<div id="setup" class="section">
		<h1>Setting Up A Script</h1>
		<p>Now you know what a function is, what variables are and other useful stuff. Now we can start writing our scripts.</p>

		<h2>General</h2>
		<p><br><br>In general a script is made out of 2 parts:
		<ul>
			<li>1: One or multiple functions which do the main work of the script.</li>
			<li>2: Variables which are used for all functions of that script outside of any function, usually at the top/start of the script
				<br>+ some functions needed to initialize the script.</li>
		</ul>
		<br>Example:
		<pre><code class="lua">x = 0 -- we initialize x for all functions
a() -- we initialize the script here by calling the function a()
function a() -- does something with x
	x = x+5 -- add 5 to x
	b() -- call b to print x
end
function b()
	print(x)
end</code></pre>
		In the end the following will happen:
		<br>x = 0 → function a is called, it increases x by 5 (x is 5 now) and calls b().
		<br>b() then simply prints 5 in the console.
		<br>Though neither a() nor b() have gotten the variable x as parameters they can acces it because x is available for both, a() and b() (and any other function in this file...). => x is global for both functions.</p>
	</div>

	<div id="apiitems" class="section">
		<h1>API Items</h1>
		<p>This is an important chapter as it's the core of our API.</p>

		<h2>Events</h2>

			<p><strong>There are events and other items like functions or variables in our API. We will start with events here.</strong>
			<br><br>To understand it we should face the following problem: You write your script with its variables, functions etc.
			<br>But how does Teeworlds know when to call them?
			<br><br><strong>That's where events come in</strong>:
			<br>Teeworlds (as many other games, too) has intern events. These are functions in Teeworlds that are called after a specific thing happened, and they handle this event.
			<br>We built our API in a way that allows you to bind your own written Lua-functions a specific event that you need. If this event happens in Teeworlds, your function will be called.

			<br><br><strong>The following events are available in Lua (for now)</strong>:</p>
			<div class="api_item">
			<h3 class="option">OnTick()</h3>
			<p>
				<strong>No parameters</strong><br>
				<strong>No return value</strong><br><br>

				Maybe the most important event. A tick function, in game-programming, is
				the main function of a game as it's called a specific number of times per
				second and handles all important stuff which happens ingame (moving
				characters, creating new entities like bullets, check for player collision,
				checking if a player is hit by a bullet etc.)
				<br><br>In Teeworlds, the function OnTick is called 50x per second, so once every 20ms.
				You should register a function to this event if you need to do something each game
				step, or simply if there is no other event you can bind to to get the script work.
				<br><strong>Important</strong>: Make sure that you don't put heavy stuff into your OnTick
				function, or it will significantly slow the whole game down!
			</p>
			</div>

			<div class="api_item">
			<h3 class="option">OnScriptInit()</h3>
			<p>
				<strong>No parameters</strong><br>
				<strong>Returns</strong> (boolean): If this function does not return true, the script won't be loaded<br /><br />

				Called when the script is initialized.
				<br><strong>Important</strong>: Make sure to return true, otherwise the loading will fail!
			</p>
			</div>

			<div class="api_item">
			<h3 class="option">OnScriptUnload()</h3>
			<p>
				<strong>No parameters</strong><br>
				<strong>No return value</strong><br><br>

				Called when the script is unloaded.
				<br><strong>Hint</strong>: Reset stuff here.
			</p>
			</div>

			<div class="api_item">
			<h3 class="option">OnChat(ID, Team, Message)</h3>
			<p>
				<strong>Parameter</strong> <var>ID</var> (integer): ID of the player who sent the chat or -1 if it's a server message<br />
				<strong>Parameter</strong> <var>Team</var> (integer): Is 1 if the chatmessage is teamchat (the green one), otherwise 0<br />
				<strong>Parameter</strong> <var>Message</var> (string): The chat message itself, in plain text.<br />
				<strong>No return value</strong><br /><br />

				This event is called when a chatmessage comes in, either from a player or as
				serverchat (the yellow one) from the server.
				It passes the ID of the player who sent the message (more on this later),
				the team (allchat or teamchat (the green one)) and the message itself.
			</p>
			</div>

			<div class="api_item">
			<h3 class="option">OnEnterGame()</h3>
			<p>
				<strong>No parameters</strong><br>
				<strong>No return value</strong><br><br>

				This event is called when you enter (join) a server.
			</p>
			</div>

			<div class="api_item">
			<h3 class="option">OnKill(Killer, Victim, Weapon)</h3>
			<p>
				<strong>Parameter</strong> <var>Killer</var> (integer): ID of the player who scored the kill<br />
				<strong>Parameter</strong> <var>Victim</var> (integer): ID of the player who got killed<br />
				<strong>Parameter</strong> <var>Weapon</var> (integer): The weapon which was used my the killer<br />
				<strong>No return value</strong><br /><br />

				This event is called when a player dies (watch your killmessages on the top right of the screen).
			</p>
			</div>

			<strong>TODO: Taken from old docs, i think there are more events now :D</strong>

			<h2>Functions and variables</h2>
			<p><strong>There are also functions and variables that our API offers to interact with the game.</strong></p>

			<h2>Custom Types</h2>
			<p>Last but not least: Custom types. These are used in Teeworlds only, and are very useful for certain things. For example vectors can be used to store coordinates, colors and similar stuff.</p>

			<div class="api_item">
			<h3 class="option">vec2</h3>
			<p>
				<strong>Initialization: </strong><code>MyVector = vec2(x, y)</code><br \>
				<strong>Example Usage: </strong>Useful to store coordinates, velocities and more.<br \>
				<strong>Notes: </strong>You may use operators on this type. For example <code>vec2(5, 10)+vec2(10, 20)</code> would equal <code>vec2(15, 30)</code>. x and y are integers, for floats there is another type.
			</p>
			</div>

			<div class="api_item">
			<h3 class="option">vec2f</h3>
			<p>
				<strong>Initialization: </strong><code>MyVector = vec2f(x, y)</code><br \>
				<strong>Example Usage: </strong>Useful to store coordinates, velocities and more.<br \>
				<strong>Notes: </strong>You may use operators on this type. For example <code>vec2f(5.5, 10.5)+vec2f(10.5, 20.5)</code> would equal <code>vec2f(16.0, 31.0)</code>. x and y are floats, for integers there is another type.
			</p>
			</div>

			<div class="api_item">
			<h3 class="option">vec3</h3>
			<p>
				<strong>Initialization: </strong><code>MyVector = vec3(x, y, z)</code><br \>
				<strong>Example Usage: </strong>Useful to store color values (rbg values) and more.<br \>
				<strong>Notes: </strong>You may use operators on this type. For example <code>vec3(5, 10, 20)+vec3(10, 20, 40)</code> would equal <code>vec3(15, 30, 80)</code>. x, y and z are integers, for floats there is another type.
			</p>
			</div>

			<div class="api_item">
			<h3 class="option">vec3f</h3>
			<p>
				<strong>Initialization: </strong><code>MyVector = vec3f(x, y, z)</code><br \>
				<strong>Example Usage: </strong>Useful to store color values (rbg values) and more.<br \>
				<strong>Notes: </strong>You may use operators on this type. For example <code>vec3f(5.0, 10.0, 20.0)+vec3f(10.0, 20.0, 40.0)</code> would equal <code>vec3f(15.0, 30.0, 80.0)</code>. x, y and z are floats, for integers there is another type.
			</p>
			</div>

			<div class="api_item">
			<h3 class="option">vec4</h3>
			<p>
				<strong>Initialization: </strong><code>MyVector = vec4(r, b, g, a)</code><br \>
				<strong>Example Usage: </strong>Useful to store color values (rbga values(with alpha value)) and more.<br \>
				<strong>Notes: </strong>You may use operators on this type. For example <code>vec4(5, 10, 20, 40)+vec4(10, 20, 40, 80)</code> would equal <code>vec4(15, 30, 80, 160)</code>. r, b, g and a are integers, for floats there is another type.
			</p>
			</div>

			<div class="api_item">
			<h3 class="option">vec4f</h3>
			<p>
				<strong>Initialization: </strong><code>MyVector = vec4f(r, b, g, a)</code><br \>
				<strong>Example Usage: </strong>Useful to store color values (rbga values(with alpha value)) and more.<br \>
				<strong>Notes: </strong>You may use operators on this type. For example <code>vec4f(5.0, 10.0, 20.0, 40.0)+vec4f(10.0, 20.0, 40.0, 80.0)</code> would equal <code>vec4f(15.0, 30.0, 80.0, 160.0)</code>. r, b, g and a are floats, for integers there is another type.
			</p>
			</div>

			<p><strong>Note for vectors: </strong>Some Teeworlds functions or variables representing vectors. Now you know how to deal with them.</p>

	</div>

	<!-- SUPPORT -->
	<div id="support" class="section">
		<h1>Support</h1>
		<p>If you need any help feel free to contact us.</p>

		<h2>IRC</h2>
		<p>You can reach dozens of developers (including us) via our IRC channel. Please stick to the rules anyways.</p>
		<p>Visit <a href="http://irc.quakenet.net/" target=newtab>irc.quakenet.net</a> → Channel: #AllTheHaxx
		<br>...or simply use the IRC Api in the AllTheHaxx client (F5 → Join)</p>
	</div>


	<!-- LICENSE -->
	<div id="license" class="section">
		<h1>License</h1>
		<p>What you can and can't do with this project.</p>

		<h2>Released under MIT License. TODO: use a different license to fck B|Ice</h2>
		<p>We have released <strong>AllTheHaxx</strong> under the MIT License which is stated as:</p>
		<pre><code class="no-highlight">Copyright &copy; 2011 by _Company_

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.</code></pre>
	</div>

	<div id="footer">
		<p>Copyright &copy; 2011 <a href="#license">MIT License</a> by <a href="_Company URL_">_Company_</a></p>
	</div>

</div>

</body>
</html>
